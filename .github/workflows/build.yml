name: Build Executables

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10']

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
    
    - name: Convert icon for MacOS
      if: matrix.os == 'macos-latest'
      run: |
        # Create iconset directory
        mkdir icon.iconset
        # Convert ico to png and create required sizes
        sips -s format png icon.ico --out icon.iconset/icon_512x512.png
        sips -z 256 256 icon.iconset/icon_512x512.png --out icon.iconset/icon_256x256.png
        sips -z 128 128 icon.iconset/icon_512x512.png --out icon.iconset/icon_128x128.png
        sips -z 64 64 icon.iconset/icon_512x512.png --out icon.iconset/icon_32x32@2x.png
        sips -z 32 32 icon.iconset/icon_512x512.png --out icon.iconset/icon_32x32.png
        sips -z 16 16 icon.iconset/icon_512x512.png --out icon.iconset/icon_16x16.png
        # Convert iconset to icns
        iconutil -c icns icon.iconset
    
    - name: Build with PyInstaller
      run: |
        if [ "${{ matrix.os }}" == "macos-latest" ]; then
          pyinstaller --name MarkEd \
                     --onefile \
                     --windowed \
                     --icon icon.icns \
                     --add-data "info.db:." \
                     main.py
        else
          pyinstaller --name MarkEd \
                     --onefile \
                     --windowed \
                     --icon icon.ico \
                     --add-data "icon.ico:." \
                     --add-data "info.db:." \
                     main.py
        fi
    
    - name: Get version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
    
    - name: Package for Windows
      if: matrix.os == 'windows-latest'
      run: |
        cd dist
        mv MarkEd.exe "../MarkEd-${{ env.VERSION }}.exe"
    
    - name: Package for MacOS
      if: matrix.os == 'macos-latest'
      run: |
        cd dist
        mkdir -p MarkEd.app/Contents/MacOS
        cp MarkEd MarkEd.app/Contents/MacOS/
        hdiutil create -volname "MarkEd-${{ env.VERSION }}" -srcfolder MarkEd.app -ov -format UDZO "MarkEd-${{ env.VERSION }}.dmg"
        mv "MarkEd-${{ env.VERSION }}.dmg" ../
    
    - name: Package for Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Create Debian package structure
        mkdir -p deb/DEBIAN
        mkdir -p deb/usr/local/bin
        
        # Create control file
        cat > deb/DEBIAN/control << EOF
        Package: MarkEd
        Version: ${VERSION#v}
        Section: utils
        Priority: optional
        Architecture: amd64
        Maintainer: T9Air <aymorg1@gmail.com>
        Description: MarkEd
         An intuitive, cross-platform, real-time Markdown editor built with Python.
        EOF
        
        # Copy binary
        cp dist/MarkEd deb/usr/local/bin/
        
        # Build and move package
        dpkg-deb --build deb "MarkEd-${{ env.VERSION }}.deb"
        mv "MarkEd-${{ env.VERSION }}.deb" ./ 
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: MarkEd-${{ matrix.os }}
        path: |
          MarkEd-${{ env.VERSION }}.exe
          MarkEd-${{ env.VERSION }}.dmg
          MarkEd-${{ env.VERSION }}.deb

    - name: Attach to Release
      uses: softprops/action-gh-release@01570a1f39cb168c169c802c3bceb9e93fb10974
      with:
        files: |
          MarkEd-${{ env.VERSION }}.exe
          MarkEd-${{ env.VERSION }}.dmg
          MarkEd-${{ env.VERSION }}.deb
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}